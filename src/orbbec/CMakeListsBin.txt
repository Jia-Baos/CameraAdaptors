
cmake_minimum_required(VERSION 3.27)

project(orbbec)

message(STATUS "Project Name: ${PROJECT_NAME}")
message(STATUS "Project Dir: ${CMAKE_CURRENT_SOURCE_DIR}")

# obsensor sdk
set(OrbbecSDK_ROOT_DIR ${CMAKE_SOURCE_DIR}/SDK/orbbec)
set(OrbbecSDK_INCLUDE_DIR ${OrbbecSDK_ROOT_DIR}/include)
set(OrbbecSDK_LIBRARY_DIRS ${OrbbecSDK_ROOT_DIR}/lib/x86_64)
file(GLOB ORBBEC_LIBS "${OrbbecSDK_LIBRARY_DIRS}/lib*.so")
message(STATUS "library: ${ORBBEC_LIBS}")

# 将源代码添加到此项目的可执行文件。
# aux_source_directory(. main_files)
file(GLOB FILES_SRC "./*.cpp")
file(GLOB FILES_HEADERS "./*.h")
file(GLOB BASE_FILES_HEADERS "../*.h")
add_executable(${PROJECT_NAME} ${FILES_SRC} ${FILES_HEADERS} ${BASE_FILES_HEADERS})

find_package(OpenCV REQUIRED)

if(OpenCV_FOUND)
        message(STATUS "OpenCV library status: ")
        message(STATUS " version: ${OpenCV_VERSION}")
        message(STATUS " library: ${OpenCV_LIBS}")
        message(STATUS " include path: ${OpenCV_INCLUDE_DIRS}")
else()
        message(STATUS "Could not find OpenCV library")
endif()

# 链接库头文件路径
target_include_directories(${PROJECT_NAME} PUBLIC ${OrbbecSDK_INCLUDE_DIR} ${OpenCV_INCLUDE_DIRS} ../)

# 链接库文件夹
# 如果动态链接库和静态链接库同名，优先调用静态链接库
target_link_directories(${PROJECT_NAME} PUBLIC ${OrbbecSDK_LIBRARY_DIRS})

target_link_libraries(${PROJECT_NAME} PUBLIC pthread)
target_link_libraries(${PROJECT_NAME} PUBLIC ${ORBBEC_LIBS} ${OpenCV_LIBS})

install(TARGETS ${PROJECT_NAME}
        ARCHIVE DESTINATION lib
        LIBRARY DESTINATION lib
        RUNTIME DESTINATION bin)
